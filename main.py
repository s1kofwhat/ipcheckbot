# main.py
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from flask import Flask
import threading
import os
from dotenv import load_dotenv  # üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ .env

# üîã –ó–∞–≥—Ä—É–∂–∞–µ–º .env (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–∞ Render ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
load_dotenv()

# === –¢–û–ö–ï–ù –ë–û–¢–ê ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Å—å, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª BOT_TOKEN –≤ Secrets –∏–ª–∏ –≤ .env")

# üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è keep-alive (—á—Ç–æ–±—ã Replit –Ω–µ –∑–∞—Å—ã–ø–∞–ª)
app = Flask('')

@app.route('/')
def home():
    return "<h1>IP Geolocation Bot is running!</h1>"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = threading.Thread(target=run_flask)
    t.daemon = True
    t.start()

# === API –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
GEO_API_URL = "http://ip-api.com/json/"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def get_ip_info(ip: str) -> str:
    try:
        response = requests.get(
            GEO_API_URL + ip,
            params={"lang": "ru", "fields": "status,message,country,city,regionName,lat,lon"},
            timeout=10
        )

        print(f"üîπ API Response [{ip}]: {response.status_code} ‚Äî {response.text}")

        if response.status_code != 200:
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–∏—Å–æ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."

        data = response.json()

        if data.get("status") == "fail":
            return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

        country = data.get("country", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        city = data.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        region = data.get("regionName", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        lat = data.get("lat")
        lon = data.get("lon")

        if lat is not None and lon is not None:
            coords = f"<a href='https://maps.google.com/?q={lat},{lon}'>{lat}, {lon}</a>"
        else:
            coords = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        return (
            f"üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ IP: <b>{ip}</b>\n\n"
            f"üåç –°—Ç—Ä–∞–Ω–∞: {country}\n"
            f"üèô –ì–æ—Ä–æ–¥: {city}\n"
            f"üìç –†–µ–≥–∏–æ–Ω: {region}\n"
            f"üó∫ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}"
        )

    except Exception as e:
        print(f"üîπ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ IP-–∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>8.8.8.8</code>), "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é."
    )

@dp.message()
async def handle_ip(message: types.Message):
    ip = message.text.strip()

    import re
    if not re.fullmatch(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$", ip):
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IPv4-–∞–¥—Ä–µ—Å.")
        return

    private_ranges = [
        ip.startswith("192.168."),
        ip.startswith("10."),
        ip.startswith("172.") and 16 <= int(ip.split(".")[1]) <= 31,
        ip == "127.0.0.1"
    ]
    if any(private_ranges):
        await message.reply("üîí –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π) IP-–∞–¥—Ä–µ—Å. –£ –Ω–µ–≥–æ –Ω–µ—Ç –≤–Ω–µ—à–Ω–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
        return

    sent = await message.reply("üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...")
    result = get_ip_info(ip)

    try:
        await sent.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        print(f"üîπ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        await sent.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")

async def main():
    # üîπ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Replit)
    keep_alive()
    print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è keep-alive")

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
